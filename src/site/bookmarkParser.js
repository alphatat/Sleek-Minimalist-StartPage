function htmlParse(htmlText) {
  const doc = new DOMParser().parseFromString(htmlText, "text/html");

  let allLinks = Array.from(doc.getElementsByTagName("a")).map((a) => a.href);

  allLinks = allLinks.map(
    (str) => str.match(/^([^:\n]+:\/\/)?([^:#/\n]*)/g)[0]
  );
  allLinks = [...new Set(allLinks)];

  const knownTlds = [
    "com",
    "org",
    "edu",
    "gov",
    "net",
    "co",
    "io",
    "uk",
    "jp",
    "au",
    "ca",
    "de",
    "fr",
    "it",
    "es",
    "cn",
    "in",
    "br",
    "ru",
    "nl",
    "se",
    "dk",
    "no",
    "fi",
    "ch",
    "at",
    "be",
    "pl",
    "ie",
    "nz",
    "sg",
    "kr",
    "tw",
    "hk",
    "my",
    "za",
    "il",
    "mx",
    "tr",
    "id",
    "th",
    "vn",
    "ph",
    "gr",
    "cz",
    "hu",
    "pt",
    "ro",
    "sk",
    "si",
    "bg",
    "hr",
    "lt",
    "lv",
    "ee",
    "is",
    "li",
    "lu",
    "mc",
    "mt",
    "cy",
    "sm",
    "va",
    "ad",
    "ae",
    "af",
    "al",
    "am",
    "ao",
    "ar",
    "az",
    "ba",
    "bd",
    "bf",
    "bh",
    "bi",
    "bj",
    "bn",
    "bo",
    "bw",
    "by",
    "bz",
    "cd",
    "cf",
    "cg",
    "cl",
    "cm",
    "cn",
    "co",
    "cr",
    "cu",
    "cv",
    "cy",
    "cz",
    "dj",
    "dk",
    "dm",
    "do",
    "dz",
    "ec",
    "ee",
    "eg",
    "er",
    "et",
    "fj",
    "fm",
    "ga",
    "ge",
    "gg",
    "gh",
    "gi",
    "gl",
    "gm",
    "gn",
    "gp",
    "gq",
    "gr",
    "gt",
    "gu",
    "gw",
    "gy",
    "hk",
    "hn",
    "hr",
    "ht",
    "hu",
    "id",
    "ie",
    "il",
    "in",
    "iq",
    "ir",
    "is",
    "it",
    "je",
    "jm",
    "jo",
    "jp",
    "ke",
    "kg",
    "kh",
    "ki",
    "km",
    "kn",
    "kp",
    "kr",
    "kw",
    "kz",
    "la",
    "lb",
    "lc",
    "li",
    "lk",
    "lr",
    "ls",
    "lt",
    "lu",
    "lv",
    "ly",
    "ma",
    "mc",
    "md",
    "me",
    "mg",
    "mh",
    "mk",
    "ml",
    "mm",
    "mn",
    "mo",
    "mp",
    "mq",
    "mr",
    "ms",
    "mt",
    "mu",
    "mv",
    "mw",
    "mx",
    "my",
    "mz",
    "na",
    "nc",
    "ne",
    "nf",
    "ng",
    "ni",
    "nl",
    "no",
    "np",
    "nr",
    "nu",
    "nz",
    "om",
    "pa",
    "pe",
    "pf",
    "pg",
    "ph",
    "pk",
    "pl",
    "pm",
    "pn",
    "pr",
    "ps",
    "pt",
    "pw",
    "py",
    "qa",
    "re",
    "ro",
    "rs",
    "ru",
    "rw",
    "sa",
    "sb",
    "sc",
    "sd",
    "se",
    "sg",
    "sh",
    "si",
    "sk",
    "sl",
    "sm",
    "sn",
    "so",
    "sr",
    "ss",
    "st",
    "sv",
    "sx",
    "sy",
    "sz",
    "tc",
    "td",
    "tg",
    "th",
    "tj",
    "tk",
    "tl",
    "tm",
    "tn",
    "to",
    "tr",
    "tt",
    "tv",
    "tw",
    "tz",
    "ua",
    "ug",
    "uk",
    "us",
    "uy",
    "uz",
    "va",
    "vc",
    "ve",
    "vg",
    "vi",
    "vn",
    "vu",
    "wf",
    "ws",
    "ye",
    "yt",
    "za",
    "zm",
    "zw",
  ];
  const lookUp = new Set(knownTlds);

  const nameStrs = allLinks.map((url) => {
    url = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "");
    let parts = url.split(".");
    while (lookUp.has(parts.at(-1))) parts.pop();
    return parts.reverse().join("");
  });
  const keyInR = [
    "hotcornerGridTL",
    "hotcornerGridTR",
    "hotcornerGridBL",
    "hotcornerGridBR",
  ];
  let returnDict = {};
  for (let i = 0; i < 4; i++) {
    let tempList = nameStrs.slice(16 * i, 16 * (i + 1)).map((val, j) => ({
      name: val,
      url: allLinks[j + 16 * i],
    }));
    returnDict[keyInR[i]] = tempList;
  }
  let tempList = nameStrs.slice(64).map((val, j) => ({
    name: val,
    url: allLinks[j + 64],
  }));
  returnDict["bookmarks"] = tempList;
  returnDict["font"] = "'JetBrains Mono', monospace";
  returnDict["paletteIndex"] = "10";
  const jsonStr = JSON.stringify(returnDict, null, 2); // null,2 adds indentation

  // Create a Blob from the JSON string
  const blob = new Blob([jsonStr], { type: "application/json" });

  // Create a temporary link element
  const a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = "bookmarks.json"; // Name of the downloaded file
  document.body.appendChild(a);

  // Programmatically click the link to trigger download
  a.click();

  // Clean up
  document.body.removeChild(a);
  URL.revokeObjectURL(a.href);
}
